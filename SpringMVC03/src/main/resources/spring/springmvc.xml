<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

	<!-- 视图解析器
		 解析jsp的视图解析器
		默认使用jstl标签,classpath下得有jstl包
	-->
	<!--可以为视图解析器配置前缀和后缀-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
			<property name="prefix" value="/WEB-INF/jsp/"/>
			<property name="suffix" value=".jsp"/>
	</bean>

	<!--
		对应注解的handler可以单独配置,
		实际开发中建议使用组件扫描
	-->
	<context:component-scan base-package="com.mybatis"></context:component-scan>

	<!--使用mvc的注解驱动可以代替以上俩个注解映射器和注解适配器的配置
	   默认加载了很多的参数绑定方法,比如json转换解析器默认就加载了..
	   实际开发时使用...
	-->
	<mvc:annotation-driven validator="validator"></mvc:annotation-driven>

	<!-- 校验器 -->
	<bean id="validator"
		  class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<!--hibernate校验器-->
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!--指定校验使用的资源文件,在文件中配置校验错误信息,如果不指定则默认使用classpath下的ValidationMessages.properties-->
		<property name="validationMessageSource" ref="messageSource" />
	</bean>
	<!--校验错误信息配置文件-->
	<bean id="messageSource"
		  class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!--资源文件名-->
		<property name="basenames" value="classpath:CustomValidationMessages"></property>
		<!--资源文件编码格式-->
		<property name="fileEncodings" value="utf-8" />
		<!--对资源文件内容缓存时间,单位秒-->
		<property name="cacheSeconds" value="120" />
	</bean>
	<!-- 全局异常处理器
		只要实现HandlerExceptionResolver接口就是全局异常处理器
	 -->
	<bean class="com.mybatis.exception.CustomExceptionResolver"></bean>

	<!-- 文件上传 -->
	<bean id="multipartResolver"
		  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 设置上传文件的最大尺寸为5MB -->
		<property name="maxUploadSize">
			<value>5242880</value>
		</property>
	</bean>

	<!-- 静态资源解析
	包括 ：js、css、img、..
	 -->
    <mvc:resources location="/dist/" mapping="/dist/**"/>
	<mvc:resources location="/img/" mapping="/img/**"/>
<!--	<mvc:resources mapping="/**" location="/"/>-->

	<!--
		配置拦截器
		springmvc配置类似全局的拦截器，springmvc框架将配置的类似全局的拦截器注入到每个HandlerMapping中。
	-->
	<mvc:interceptors>
		<!-- 登陆认证拦截器 -->
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<mvc:exclude-mapping path="/img/**"/>
			<mvc:exclude-mapping path="/dist/**"/>
			<mvc:exclude-mapping path="/user/loginView"/>
			<mvc:exclude-mapping path="/user/login"/>
			<bean class="com.mybatis.interceptor.LoginHandlerInterceptor"></bean>
		</mvc:interceptor>
		<!--多个拦截器顺序执行-->
		<mvc:interceptor>
			<!-- /**表示所有url包括子url路径 -->
			<mvc:mapping path="/**"/>
			<bean class="com.mybatis.interceptor.HandlerInterceptor1"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<!-- /**表示所有url包括子url路径 -->
			<mvc:mapping path="/**"/>
			<bean class="com.mybatis.interceptor.HandlerInterceptor2"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
</beans>
